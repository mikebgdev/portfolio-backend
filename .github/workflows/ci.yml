name: Portfolio CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_portfolio_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx flake8 black isort mypy

    - name: Set up environment variables
      run: |
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=test_user" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=test_password" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_portfolio_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci-very-long-and-secure" >> $GITHUB_ENV
        echo "DEBUG=False" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV
        echo "CORS_ORIGINS=http://localhost:3000" >> $GITHUB_ENV

    - name: Code formatting check
      run: |
        black --check app/
        isort --check-only app/

    - name: Lint code
      run: |
        flake8 app/ --count --statistics --max-line-length=100 --extend-ignore=E203,W503
        
    - name: Type checking
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Test application startup
      run: |
        python -c "from app.main import app; print('âœ… Application imports successfully')"

    - name: Test API endpoints
      run: |
        python -m pytest tests/ -v --tb=short
      
    - name: Test database connection
      run: |
        python -c "
        from app.database import engine;
        from sqlalchemy import text;
        with engine.connect() as conn:
          result = conn.execute(text('SELECT 1'));
          print('âœ… Database connection successful')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || echo "Security vulnerabilities found in dependencies"

    - name: Security scan with bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json || echo "Security issues found"
        if [ -f bandit-report.json ]; then
          cat bandit-report.json
        fi

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t portfolio-backend:latest .
        echo "âœ… Docker image built successfully"
        
    - name: Test Docker container
      run: |
        docker run --rm portfolio-backend:latest python -c "from app.main import app; print('âœ… Container test passed')"
        
    - name: Ready for deployment
      run: |
        echo "âœ… All checks passed - Application ready for deployment"
        echo "ðŸš€ Deploy with Docker: docker run -p 8000:8000 portfolio-backend:latest"
        echo "ðŸ”§ Admin panel: http://your-server:8000/admin/"
        echo "ðŸ“š API docs: http://your-server:8000/docs"