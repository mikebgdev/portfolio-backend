name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_portfolio_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-test.txt

    - name: Set up environment variables
      run: |
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=test_user" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=test_password" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_portfolio_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Run linting
      run: |
        pip install flake8 black isort
        # Check code formatting
        black --check .
        # Check import sorting
        isort --check-only .
        # Check code style
        flake8 app tests

    - name: Run type checking
      run: |
        pip install mypy
        mypy app --ignore-missing-imports

    - name: Run tests
      run: |
        pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run security scans
      run: |
        # Check for security vulnerabilities in dependencies
        safety check
        # Check for security issues in code
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: bandit-report.json

  validate-application:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_portfolio_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      run: |
        echo "POSTGRES_HOST=localhost" >> $GITHUB_ENV
        echo "POSTGRES_PORT=5432" >> $GITHUB_ENV
        echo "POSTGRES_USER=test_user" >> $GITHUB_ENV
        echo "POSTGRES_PASSWORD=test_password" >> $GITHUB_ENV
        echo "POSTGRES_DB=test_portfolio_db" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_ID=test-client-id" >> $GITHUB_ENV
        echo "GOOGLE_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV

    - name: Run database migrations
      run: |
        alembic upgrade head

    - name: Test application startup
      run: |
        # Test that the application can start
        timeout 10 python -c "from app.main import app; import uvicorn; uvicorn.run(app, host='0.0.0.0', port=8000)" &
        APP_PID=$!
        
        # Wait for application to start
        sleep 5
        
        # Test health endpoint if it exists
        curl -f http://localhost:8000/health || echo "Health endpoint not available"
        
        # Cleanup
        kill $APP_PID 2>/dev/null || true

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [validate-application]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Application ready for deployment with Coolify or direct server deployment"
        # Add your staging deployment commands here
        # This could be SSH to server, systemd service restart, etc.

  deploy-production:
    runs-on: ubuntu-latest
    needs: [validate-application]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Application ready for deployment with Coolify or direct server deployment"
        # Add your production deployment commands here
        # This could be SSH to server, systemd service restart, etc.